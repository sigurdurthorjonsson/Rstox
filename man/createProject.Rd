% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rstox_base.r
\name{createProject}
\alias{createProject}
\alias{openProject}
\alias{reopenProject}
\alias{getProject}
\alias{updateProject}
\alias{saveProject}
\alias{closeProject}
\alias{isProject}
\alias{readXMLfiles}
\title{Create, open or save a StoX project}
\usage{
createProject(projectName = NULL, files = list(), dir = NULL,
  model = "StationLengthDistTemplate", ow = NULL, open = TRUE,
  ignore.processXML = FALSE, parlist = list(), msg = TRUE, ...)

openProject(projectName = NULL, out = c("project", "baseline", "name"),
  msg = FALSE)

reopenProject(projectName, out = c("project", "baseline", "name"))

getProject(projectName, msg = FALSE)

updateProject(projectName)

saveProject(projectName)

closeProject(projectName)

isProject(projectName, subset.out = FALSE)

readXMLfiles(files, dir = tempdir(), model = list(), nchars = 500)
}
\arguments{
\item{projectName}{The name or full path of the project, a baseline object (as returned from \code{getBaseline} or \code{runBaseline}), og a project object (as returned from \code{openProject}). For \code{createProject}, \code{projectName}=NULL (the default) returns available templates, and for \code{openProject}, zeros length \code{projectName} returns all StoX projects in the default workspace either given as a vector of full paths, or, in the case projectName is an empty list, a list of names of StoX projects located in the default workspace and sub directories. Projects locataed in sub directories of the default workspace can be given by the relative path, or are searched for by name.}

\item{files}{A list with elements named "acoustic", "biotic", "landing", "process" (holding the project.xml file) or other implemented types of data to be copied to the project (available data types are stored in StoX_data_types in the environment "RstoxEnv". Get these by get("StoX_data_types", envir=get("RstoxEnv"))). These could be given as directories, in which case all files in those directories are copied, or as URLs. If given as a single path to a directory holding sub-directories with names "acoustic", "biotic", "landing", "process" or other implemented types of data, the files are copied from these directories. If files has length 0 (default), the files present in the project directory are used, if already existing (requires to answer "y" when asked to overwrite the project if ow=NULL, or alternatively to set ow=TRUE).}

\item{dir}{The directory in which to put the project. The project is a directory holding three sub directories named "input", "output" and "process", where input, output and process files are stored.}

\item{model}{The model to use, either given as a string specifying a template, or a vector of process names or list of processes given as lists of parameter specifications (see \code{parlist}). Show available templates with createProject().}

\item{ow}{Specifies whether to ovewrite existing project: If TRUE, overwrite; if FALSE, do not overwrite; if NULL (default), aks the user to confitm overwriting.}

\item{open}{Logical: if TRUE (defalut) open the project in memory.}

\item{ignore.processXML}{Logical: if TRUE do not copy any project.XML file given in \code{files} to the project.}

\item{parlist, ...}{See \code{\link{runBaseline}}.}

\item{msg}{Logical: If TRUE print messages to the console.}

\item{out}{One of "project", "baseline" or "name" (project name) (only first character used), specifying the output.}

\item{nchars}{The number of characters to read when determining the types of the files in readXMLfiles().}
}
\value{
A project object
\code{createProject} returns the path to the StoX project directory. \cr \cr
\code{openProject} returns the object specified in 'out'. \cr \cr
\code{reopenProject} returns the object specified in 'out'. \cr \cr
\code{getProject} returns the project object. \cr \cr
\code{updateProject} returns TRUE for success and FALSE for no XML files linked to reading functions. \cr \cr
\code{saveProject} returns the project object. \cr \cr
\code{closeProject} returns TRUE if the project was open and FALSE if not. \cr \cr
\code{isProject} returns TRUE if the project exists on file and FALSE if not. \cr \cr
\code{readXMLfiles} returns the XML data. \cr \cr
}
\description{
\code{createProject} creates a new StoX project (from xml files). \cr \cr
\code{openProject} opens a StoX project. If the project has already been opened, \code{openProject} will only retrieve the project object from the RstoxEnv enviromnent. To force open the project use \code{reopenProject}. \cr \cr
\code{reopenProject} re-opens a StoX project, which is equivalent to closeing and then opening the project. \cr \cr
\code{getProject} gets the project object, either from the input if this is a baseline or project object, or from the project environment. \cr \cr
\code{updateProject} updates links to xml files in a project. \cr \cr
\code{saveProject} saves a StoX project. This implies to save to the project.XML file all changes that are made to the project environment, such as changes in parameter values through the "..." input to runBaseline(). Such changes are only implemented in the project environment (in R memory), and will not be saved to the project.XML file unless saveProject() is run. \cr \cr
\code{closeProject} removes the project from memory. \cr \cr
\code{isProject} checks whether the project exists on file. \cr \cr
\code{readXMLfiles} reads XML data via a temporary project. \cr \cr
}
\examples{
# Show templates:
createProject()
# Create the test project:
createProject("Test_Rstox", files=system.file("extdata", "Test_Rstox", package="Rstox"), ow=FALSE)

# See avilable projects, either as full paths or as a list:
openProject()
openProject(list())

# Read xml file directly from any location:
xmlfiles <- system.file("extdata", "Test_Rstox", package="Rstox", "input")
list.files(xmlfiles, recursive=TRUE)
dat <- readXMLfiles(xmlfiles)

}
