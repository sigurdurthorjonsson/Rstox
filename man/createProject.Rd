% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rstox_base.r
\name{createProject}
\alias{closeProject}
\alias{createProject}
\alias{getProject}
\alias{isProject}
\alias{openProject}
\alias{pointToStoXFiles}
\alias{readXMLfiles}
\alias{reopenProject}
\alias{saveProject}
\alias{updateProject}
\title{Create, open or save a StoX project}
\usage{
createProject(projectName = NULL, files = list(), dir = NULL,
  model = "StationLengthDistTemplate", ow = NULL, open = TRUE,
  ignore.processXML = FALSE, parlist = list(), ...)

openProject(projectName = NULL, out = c("project", "baseline", "name"))

reopenProject(projectName, out = c("project", "baseline", "name"))

getProject(projectName)

updateProject(projectName)

saveProject(projectName)

closeProject(projectName)

isProject(projectName)

readXMLfiles(files, dir = tempdir(), nchars = 500)

pointToStoXFiles(projectName, files = NULL)
}
\arguments{
\item{projectName}{The name or full path of the project, a baseline object (as returned from getBaseline() or runBaseline()), og a project object (as returned from open).}

\item{files}{A list with elements named "acoustic", "biotic", "landing", "process" (holding the project.xml file) or other implemented types of data to be copied to the project (available data types are stored in StoX_data_types in the environment "RstoxEnv". Get these by get("StoX_data_types", envir=get("RstoxEnv"))). These could be given as directories, in which case all files in those directories are copied, or as URLs. If given as a single path to a directory holding sub-directories with names "acoustic", "biotic", "landing", "process" or other implemented types of data, the files are copied from these directories. If files has length 0 (default), the files present in the project directory are used, if already existing (requires to answer "y" when asked to overwrite the project if ow=NULL, or alternatively to set ow=TRUE).}

\item{dir}{The directory in which to put the project. The project is a directory holding three sub directories named "input", "output" and "process", where input, output and process files are stored.}

\item{model}{The model to use, either given as a string specifying a template, or a vector of process names or list of processes given as lists of parameter specifications (not yet implemented). Show available templates with createProject().}

\item{ow}{Specifies whether to ovewrite existing project: If TRUE, overwrite; if FALSE, do not overwrite; if NULL (default), aks the user to confitm overwriting.}

\item{open}{Logical: if TRUE (defalut) open the project in memory.}

\item{ignore.processXML}{Logical: if TRUE do not copy any project.XML file given in \code{files} to the project.}

\item{parlist}{List of parameters values overriding existing parameter values. These are specified as processNames = list(parameter = value), for example AcousticDensity = list(a = -70, m = 10), BioStationWeighting = list(WeightingMethod = "NASC", a = -70, m = 10). Numeric parameters must be given as numeric, string parameters as string, and logical parameters (given as strings "true"/"false" in StoX) can be given as logical TRUE/FALSE.}

\item{...}{Same as parlist, but can be specified separately (not in a list but as separate inputs).}

\item{out}{One of "project", "baseline" or "name" (project name) (only first character used), specifying the output.}

\item{nchars}{The number of characters to read when determining the types of the files in readXMLfiles().}
}
\value{
A project object
\code{createProject} returns the path to the StoX project directory. \cr \cr
\code{openProject} returns the object specified in 'out'. \cr \cr
\code{reopenProject} returns the object specified in 'out'. \cr \cr
\code{getProject} returns the project object. \cr \cr
\code{updateProject} returns TRUE for success and FALSE for no XML files linked to reading functions. \cr \cr
\code{saveProject} returns the project object. \cr \cr
\code{closeProject} returns TRUE if the project was open and FALSE if not. \cr \cr
\code{isProject} returns TRUE if the project exists on file and FALSE if not. \cr \cr
\code{readXMLfiles} returns the XML data. \cr \cr
\code{pointToStoXFiles} returns the file paths linked to the project. \cr \cr
}
\description{
\code{createProject} creates a new project from xml files or an URL. \cr \cr
\code{openProject} opens a StoX project. \cr \cr
\code{reopenProject} re-opens a StoX project, which is to close and then open the project. \cr \cr
\code{getProject} gets the project object, either from the input if being a baseline or project object, or from the project environment. \cr \cr
\code{updateProject} updates links to xml files in a project. \cr \cr
\code{saveProject} saves a StoX project, typically after making changes through the "..." input to runBaseline(), in which case changes are only applied to the project in memory. \cr \cr
\code{closeProject} removes the project from memory. \cr \cr
\code{isProject} checks whether the project exists on file. \cr \cr
\code{readXMLfiles} reads XML data via a temporary project. \cr \cr
\code{pointToStoXFiles} updates a project with the files located in the "input" directory. \cr \cr
}
\examples{
# Show templates:
createProject()
# Create the test project:
createProject("Test_Rstox", files=system.file("extdata", "Test_Rstox", package="Rstox"), ow=TRUE)

# Read xml file directly from any location:
xmlfiles <- system.file("extdata", "Test_Rstox", package="Rstox", "input")
list.files(xmlfiles, recursive=TRUE)
dat <- readXMLfiles(xmlfiles, input=NULL)

}

