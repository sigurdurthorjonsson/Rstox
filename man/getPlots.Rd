% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rstox_reports.r
\name{getPlots}
\alias{getPlots}
\alias{getReports}
\title{Get various plots and reports in Rstox}
\usage{
getPlots(projectName, out = "all", options = "", ...)

getReports(projectName, out = "all", options = "", ...)
}
\arguments{
\item{projectName}{The name or full path of the project, a baseline object (as returned from \code{\link{getBaseline}} or \code{\link{runBaseline}}, og a project object (as returned from \code{\link{openProject}}).}

\item{out}{A string vector giving the plot or report functions to run. See getRstoxEnv()$keywords for available keywords.}

\item{options}{A string vector holding the parameters passed on to the plotting functions. These parameters overrides identically named parameters in '...'. The parameters must be formatted as R expressions (as typed into an R console), and separated by semicolons (";"). See examples below:
\describe{
\item{"Single string"}{"string = 'a string'"}
\item{"String vector"}{"stringvec = c('red', 'blue', 'yellow2')"}
\item{"Numeric"}{"num = 1.55"}
\item{"Numeric vector"}{"numvec = c(1.4e-6, 16/3, runif(3))"}
\item{"Logical"}{"ok = TRUE"}
\item{"Logical vector"}{"okvec = c( TRUE, FALSE, T, F, {set.seed(0); runif(3)>0.3} )"}
\item{"Array"}{"arr = array(runif(12), dim=3:4)"}
\item{"Function"}{"fun1 = function(x) sin(rev(x))"}
}
All the examples in one string:
options = "string = 'a string'; stringvec = c('red', 'blue', 'yellow2'); num = 1.55; numvec = c(1.4e-6, 16/3, runif(3)); ok = TRUE; okvec = c( TRUE, FALSE, T, F, runif(3)>0.3 ); arr = array(runif(12), dim=3:4); fun1 = function(x) sin(rev(x)); fun3 = runif"}

\item{...}{Parameters passed on to the plotting functions.}
}
\value{
A vector of file names of the plots or reports.
}
\description{
\code{getPlots} calls all or a subset of the plotting functions in Rstox (name starting with plot). \cr \cr
\code{getReports} calls all or a subset of the report functions in Rstox (name starting with report). \cr \cr
}
\examples{
# View all parameters of plotting functions:
sapply(getFunsRstox("plot"), function(x) names(formals(x)))
projectName <- "Test_Rstox"
# Get all plots:
getPlots(projectName)
# Get all reports:
getReports(projectName)

}
