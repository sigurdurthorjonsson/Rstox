% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rstox_base.r
\name{runBaseline}
\alias{runBaseline}
\alias{getBaseline}
\title{Run a StoX baseline model}
\usage{
runBaseline(projectName, startProcess = 1, endProcess = Inf,
  reset = FALSE, save = FALSE, out = c("name", "baseline", "project"),
  msg = TRUE, exportCSV = FALSE, warningLevel = 0, parlist = list(),
  ...)

getBaseline(projectName, input = c("par", "proc"), proc = "all",
  drop = TRUE, msg = TRUE, startProcess = 1, endProcess = Inf,
  reset = FALSE, save = FALSE, parlist = list(), ...)
}
\arguments{
\item{projectName}{The name or full path of the project, a baseline object (as returned from getBaseline() or runBaseline()), og a project object (as returned from open).}

\item{startProcess}{The name or number of the start process in the list of processes in the model (use info=TRUE to return a list of the processes). The use of startProcess and endProcess requres that either no processes in the given range of processes depends on processes outside of the range, or that a baseline object is given in the input.}

\item{endProcess}{The name or number of the end process in the list of processes in the model (use info=TRUE to return a list of the processes).}

\item{reset}{Logical; if TRUE rerun the baseline model even if it has been run previously.}

\item{save}{Logical; if TRUE changes to the project specified in parlist and "..." are saved in Java and to the object javaParameters in the project list in the RstoxEnv environment.}

\item{out}{The object to return from runBaseline(), one of "name" (projectName), "baseline" (Java baseline object) or "project" (Java project object, containing the baseline object).}

\item{msg}{Logical: if TRUE print information about the progress of reading the data.}

\item{exportCSV}{Logical: if TRUE turn on exporting csv files from the baseline run.}

\item{warningLevel}{The warning level used in the baseline run, where 0 stops the baseline for Java warnings, and 1 continues with a warning.}

\item{parlist}{List of parameters values overriding existing parameter values. These are specified as processName = list(parameter = value), for example AcousticDensity = list(a = -70, m = 10), BioStationWeighting = list(WeightingMethod = "NASC", a = -70, m = 10). Logical parameters (given as strings "true"/"false" in StoX) can be given as logical TRUE/FALSE.}

\item{...}{Same as parlist, but can be specified separately (not in a list but as separate inputs).}

\item{input}{The input data requested in getBaseline(). This is a string vector naming baseline processes and process data. The key words "par" and "proc" returns all parameters and process data, respectively.}

\item{proc}{A string vector naming processes from which data should be returned.}

\item{drop}{Logical: if TRUE drop empty list elements (default).}

\item{par}{A list of the same length as \code{fun} giving parameter values to uniquely identify processes. The list names are the names of the baseline process parameters, and the values are the baseline process values.}
}
\value{
For \code{\link{runBaseline}} theproject name, and for \code{\link{getBaseline}} a list of three elements named "parameters", "output", "processData", where empty elements can be dropped.
}
\description{
\code{runBaseline} runs a StoX baseline model possibily overriding parameters. \cr \cr
\code{getBaseline} returns input and output data from the StoX baseline model. \cr \cr
}
\examples{
# Create the test project:
projectName <- "Test_Rstox"
createProject(projectName, files=system.file("extdata", "Test_Rstox", package="Rstox"), ow=FALSE)

# Get output from the baseline:
system.time(baselineData <- getBaseline(projectName))
# Check the structure of the output from getBaseline():
ls.str(baselineData)

# Override parameters in the baseline:
system.time(baselineDataMod <- getBaseline(projectName, 
    AcousticDensity = list(a = -70, m = 10),
    BioStationWeighting = list(WeightingMethod = "NASC", Radius=100, a = -70, m = 10)))

# Check differences in parameters and data saved by the baseline model:
all.equal(baselineData, baselineDataMod)

}
