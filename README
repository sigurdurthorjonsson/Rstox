# Rstox version: 1.6.4 (latest alpha, 2017-11-14)
# R version: 3.4.2

# The package Rstox contains most of the functionality of the stock assesment utility StoX, which is an open source approach to acoustic and swept area survey calculations. Download Rstox from ftp://ftp.imr.no/StoX/Download/Rstox or install by running the following commands in R:

# Install the packages that Rstox depends on. Note that this updates all the specified packages to the latest (binary) version:
dep.pck <- c("data.table", "ggplot2", "pbapply", "rgdal", "rgeos", "rJava", "sp", "XML")
install.packages(dep.pck, repos="http://cran.us.r-project.org", type="binary")

# Install Rstox:
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Versions/Alpha/Rstox_1.6.4/Rstox_1.6.4.tar.gz", repos=NULL)

# Alternatively, install the latest development version from GitHub. Note that this does not garantee a stable version. For official versions of Rstox, refer to the ftp server ftp://ftp.imr.no/StoX/Download/Rstox/Versions/Alpha/Rstox_1.6.4 as described above. Install from github using the devtools package:
# devtools::install_github("Sea2Data/Rstox", ref="develop")

# Note that 64 bit Java is required to run Rstox
# On Windows, install Java from this webpage: https://www.java.com/en/download/windows-64bit.jsp, or follow the instructions found on ftp://ftp.imr.no/StoX/Tutorials/
# On Mac, getting Java and Rstox to communicate can be challenging. If you run into problems such as "Unsupported major.minor version ...", try the following:
# Update java, on
# 	http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html
# If this does not work install first the JDK and then the JRE:
# 	http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
# 	http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html
# You may want to check that the downloaded version is first in the list by running the following in the Terminal:
# 	/usr/libexec/java_home -V
# 	java -version
# Then run this in the Terminal.app:
# 	sudo ln -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# 	sudo R CMD javareconf
# Open R (close and then open if already open) and install rJava:
# 	install.packages('rJava', type='source')
# Then the installed Rstox should work.


# Release notes:

# 1. Removed plotAbundance_old(), which is no longer used. The new plotAbundance() uses ggplot2 for nicer plotting.

# 2. Changed default width, height, dpi to 5000, 3000, 500. Also added the option format=NULL, causing plots to only show in the graphics window.

# 3. Fixed a bug in readBaselineParameters(), where processes with 'enabled' set to "false" were removed. This caused problems when matching process names, and from now 'enabled' is returned in the parameter list instead.

# 4. Changed names of bootstrap runs to have constant number of characters, by padding run number by zeros.

# 5. Added the function sampleSorted(), which is used for all sampling throughout Rstox. This funciton sorts the values before sampling in order to be independent of any rearranging of the data (suppressed when the parameter sorted=FALSE). The function also includes a seed, ensuring that seeds are applied immideately before sampling.

# 6. Added the parameter 'sorted' with default TRUE to all bootstrap funcitons. This implies that all bootstrap functions change from Rstox_1.6 to Rstox_1.7, and different results should be expected. This change was forced by the discovery that two copies of the same project, where in the first the option NASC -> LayerType = WaterColumn is selected, and in the second NASC -> LayerType = PChannel, resulted in different bootstrap estimates. This behavior was considered to be a bug, and the chosen solution was to sort values prior to sampling (in the latter project the aggregation over depth layers was done in Rstox, with a method that resulted in a different ordering of the data than that of the first project).

# 7. Added the function runBootstrap_1.6(), which is identical to runBootstrap() with sorted=FALSE. This funciton can be used to obtain identical bootstrap results as in Rstox_1.6.

# 8. Introduced the new parameter 'bootstrapMethod' in runBootstrap(), which indicates the method to use for the different project types. Also restructured the bootstrap functions to have one funciton per project type, runBootstrap_acousticTrawl(), runBootstrap_sweptArea_length() and runBootstrap_sweptArea_total(), where the latter is a new bootstrap method designed for projects with total catch only and no individual measurements in the samples. The parameters 'acousticMethod' and 'bioticMethod' are still in use, but specifying the levels of the bootstrapping rather than the method itself. In the current version only the PSU~Stratum value is accepted (for bioticMethod EDSU~Stratum is interpreted as PSU~Stratum), but other combinations will can be implemented in future versions, such as Individual~PSU and even multiple combinations.

# 9. Changed the function setBaselineParameters() to set the parameters either in Java memory and in the javaParameters field in the project environment (save="java"), or in the lastParameters field in the project environment and projectData outputed from bootstrap and impute funcitons (save="last"), or both (save=TRUE or c("java", "last")).

# 10. Added the function linkPSU2Stratum(), which adds stratum information to PSU data. This is used in the functions varianceEstimation() and runBootstrap_sweptArea_total().

# 11. Reorganized the function getProjectPaths() to more clearly excecute the following intension given the input 'projectName': If given as a baseline or project Java object, get and return project parts from the object. If given as a full path, check whether the dirname(dirname()) exists. Otherwise paste the projectRoot and projectName, and do the same check on this path. Otherwise paste the default projectRoot and the projectName and to the same check on this path.

# 12. Added the function saveasProject(), which saves the current Java settings of a project to a new project. This function first saves (softly) the current project, copies the saved project, and then resets the current project using the new function resetProject() with to="saved".

# 13. Added the object 'savedParameters' in the project environment, which is changed when saveProject() is run with soft=FALSE.

# 14. Changed default msg to FALSE in setBaselineParameters().

# 15. Fixed bug in plotAbundance() and plotNASCDistribution(), where parameters specified in the ... could result in the function specified by 'format' (such as png and jpeg). 

# 16. Fixed bug in plotAbundance(), where missing valued in the variable specified by 'grp2' were assigned the value min(grp1) - 1. Changed to min(grp2) - 1.

# 17. Added the option format=NULL in plotAbundance() and plotNASCDistribution(), causing the plot to show in the graphics window only (not saved to file).

# 18. Added the parameter 'out' to the function getProject(), with a new possible value "report" for returning the Baseline Report object.

# 19. Changed how seeds are generated throughout Rstox. All seeds are now generated using the functions setSeedSingle(), getSeedV(), getSeedM(), expandSeed() and getSequenceToSampleFrom(). This is intended to make the generation of seeds in the package less fragile to changes in the code.
